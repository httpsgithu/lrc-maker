{"version":3,"file":"qmc-worker.js","sourceRoot":"","sources":["../worker/qmc-worker.ts"],"names":[],"mappings":";AAAA,MAAM,SAAS,GAAG,IAAkC,CAAC;AAGrD,MAAM,IAAI,GAAG;IACT,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;IAC9C,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;IAC9C,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;IAC9C,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;IAC9C,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;IAC9C,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;IAC9C,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;IAC9C,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CACjD,CAAC;AAEF,SAAS,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,EAAE,EAAE,EAAE;IACzC,MAAM,IAAI,GAAS,EAAE,CAAC,IAAI,CAAC;IAC3B,MAAM,UAAU,GAAG,IAAI,cAAc,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IAEhE,MAAM,aAAa,GAAG,IAAI,UAAU,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;QAC1D,IAAI,KAAK,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;QACjD,IAAI,KAAK,GAAG,IAAI,EAAE;YACd,KAAK,GAAG,CAAC,IAAI,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC;SACjC;QACD,OAAO,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,WAAW,CAAW,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;IACrG,SAAS,CAAC,KAAK,EAAE,CAAC;AACtB,CAAC,CAAC,CAAC","sourcesContent":["const qmcWorker = self as DedicatedWorkerGlobalScope;\n\n// prettier-ignore\nconst keys = [\n    0xc3, 0x4a, 0xd6, 0xca, 0x90, 0x67, 0xf7, 0x52,\n    0xd8, 0xa1, 0x66, 0x62, 0x9f, 0x5b, 0x09, 0x00,\n    0xc3, 0x5e, 0x95, 0x23, 0x9f, 0x13, 0x11, 0x7e,\n    0xd8, 0x92, 0x3f, 0xbc, 0x90, 0xbb, 0x74, 0x0e,\n    0xc3, 0x47, 0x74, 0x3d, 0x90, 0xaa, 0x3f, 0x51,\n    0xd8, 0xf4, 0x11, 0x84, 0x9f, 0xde, 0x95, 0x1d,\n    0xc3, 0xc6, 0x09, 0xd5, 0x9f, 0xfa, 0x66, 0xf9,\n    0xd8, 0xf0, 0xf7, 0xa0, 0x90, 0xa1, 0xd6, 0xf3,\n];\n\nqmcWorker.addEventListener(\"message\", (ev) => {\n    const file: File = ev.data;\n    const filebuffer = new FileReaderSync().readAsArrayBuffer(file);\n\n    const decryptedData = new Uint8Array(filebuffer).map((v, i) => {\n        let index = (i > 0x7fff ? i % 0x7fff : i) & 0x7f;\n        if (index > 0x3f) {\n            index = (0x80 - index) & 0x3f;\n        }\n        return v ^ keys[index];\n    });\n\n    qmcWorker.postMessage<IMessage>({ type: \"success\", payload: decryptedData }, [decryptedData.buffer]);\n    qmcWorker.close();\n});\n"]}